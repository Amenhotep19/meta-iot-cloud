From 78d3fd8cc9815b59f80824ee0e5a8dc9986ada9c Mon Sep 17 00:00:00 2001
From: Scott Ware <scott.r.ware@intel.com>
Date: Wed, 23 Nov 2016 14:01:56 +0000
Subject: [PATCH 3/3] Add missing cmake functions

---
 CMakeLists.txt                |  2 ++
 azure_iot_sdksFunctions.cmake | 66 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 68 insertions(+)
 create mode 100644 azure_iot_sdksFunctions.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3f496ac..8632325 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,6 +10,8 @@ SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
 
 include(GNUInstallDirs)
 
+include("azure_iot_sdksFunctions.cmake")
+
 if(WIN32)
     set(VERSION_PREFIX "${GATEWAY_VERSION}" CACHE PATH "Version Prefix")
 else()
diff --git a/azure_iot_sdksFunctions.cmake b/azure_iot_sdksFunctions.cmake
new file mode 100644
index 0000000..e36ceb4
--- /dev/null
+++ b/azure_iot_sdksFunctions.cmake
@@ -0,0 +1,66 @@
+#Copyright (c) Microsoft. All rights reserved.
+#Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+function(linkUAMQP whatExecutableIsBuilding)
+    include_directories(${UAMQP_INC_FOLDER})
+    
+    if(WIN32)
+        #windows needs this define
+        add_definitions(-D_CRT_SECURE_NO_WARNINGS)
+        add_definitions(-DGB_MEASURE_MEMORY_FOR_THIS -DGB_DEBUG_ALLOC)
+
+        target_link_libraries(${whatExecutableIsBuilding} ${UAMQP_LIB} ${SHARED_UTIL_LIB} ws2_32 secur32)
+
+        if(${use_openssl} OR ${use_wsio})
+            target_link_libraries(${whatExecutableIsBuilding} $ENV{OpenSSLDir}/lib/ssleay32.lib $ENV{OpenSSLDir}/lib/libeay32.lib)
+        
+            file(COPY $ENV{OpenSSLDir}/bin/libeay32.dll DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Debug)
+            file(COPY $ENV{OpenSSLDir}/bin/ssleay32.dll DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Debug)
+
+            file(COPY $ENV{OpenSSLDir}/bin/libeay32.dll DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Release)
+            file(COPY $ENV{OpenSSLDir}/bin/ssleay32.dll DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Release)
+        endif()
+    else()
+        target_link_libraries(${whatExecutableIsBuilding} ${UAMQP_LIB} ${SHARED_UTIL_LIB} ssl crypto)
+    endif()
+    
+    if(${use_wsio})
+        target_link_libraries(${whatExecutableIsBuilding} websockets)
+    endif()
+endfunction(linkUAMQP)
+
+function(includeMqtt)
+    include_directories(${MQTT_INC_FOLDER})
+endfunction(includeMqtt)
+
+function(linkMqttLibrary whatExecutableIsBuilding)
+    includeMqtt()
+    target_link_libraries(${whatExecutableIsBuilding} ${UMQTT_LIB})
+endfunction(linkMqttLibrary)
+
+function(includeHttp)
+endfunction(includeHttp)
+
+function(linkHttp whatExecutableIsBuilding)
+    includeHttp()
+    if(WIN32)
+        if(WINCE)
+              target_link_libraries(${whatExecutableIsBuilding} crypt32.lib)
+          target_link_libraries(${whatExecutableIsBuilding} ws2.lib)
+        else()
+            target_link_libraries(${whatExecutableIsBuilding} winhttp.lib)
+        endif()
+    else()
+        target_link_libraries(${whatExecutableIsBuilding} curl)
+    endif()
+endfunction(linkHttp)
+
+function(linkWebSockets whatExecutableIsBuilding)
+    if(${use_wsio})
+        target_link_libraries(${whatExecutableIsBuilding} websockets)
+    endif()
+endfunction(linkWebSockets)
+
+function(linkSharedUtil whatIsBuilding)
+    target_link_libraries(${whatIsBuilding} ${SHARED_UTIL_LIB})
+endfunction(linkSharedUtil)
-- 
1.9.1

